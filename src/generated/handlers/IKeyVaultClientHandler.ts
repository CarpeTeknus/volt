/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
// tslint:disable:max-line-length

import * as coreHttp from "@azure/core-http";
import * as Models from "../artifacts/models";
import Context from "../Context";

export default interface IKeyVaultClientHandler {
  setSecret(vaultBaseUrl: string, secretName: string, value: string, options: Models.KeyVaultClientSetSecretOptionalParams, context: Context): Promise<Models.SetSecretResponse>;
  deleteSecret(vaultBaseUrl: string, secretName: string, options: coreHttp.RequestOptionsBase, context: Context): Promise<Models.DeleteSecretResponse>;
  updateSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, options: Models.KeyVaultClientUpdateSecretOptionalParams, context: Context): Promise<Models.UpdateSecretResponse>;
  getSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, options: coreHttp.RequestOptionsBase, context: Context): Promise<Models.GetSecretResponse>;
  getSecrets(vaultBaseUrl: string, options: Models.KeyVaultClientGetSecretsOptionalParams, context: Context): Promise<Models.GetSecretsResponse>;
  getSecretVersions(vaultBaseUrl: string, secretName: string, options: Models.KeyVaultClientGetSecretVersionsOptionalParams, context: Context): Promise<Models.GetSecretVersionsResponse>;
  getDeletedSecrets(vaultBaseUrl: string, options: Models.KeyVaultClientGetDeletedSecretsOptionalParams, context: Context): Promise<Models.GetDeletedSecretsResponse>;
  getDeletedSecret(vaultBaseUrl: string, secretName: string, options: coreHttp.RequestOptionsBase, context: Context): Promise<Models.GetDeletedSecretResponse>;
  purgeDeletedSecret(vaultBaseUrl: string, secretName: string, options: coreHttp.RequestOptionsBase, context: Context): Promise<coreHttp.RestResponse>;
  recoverDeletedSecret(vaultBaseUrl: string, secretName: string, options: coreHttp.RequestOptionsBase, context: Context): Promise<Models.RecoverDeletedSecretResponse>;
  backupSecret(vaultBaseUrl: string, secretName: string, options: coreHttp.RequestOptionsBase, context: Context): Promise<Models.BackupSecretResponse>;
  restoreSecret(vaultBaseUrl: string, secretBundleBackup: Uint8Array, options: coreHttp.RequestOptionsBase, context: Context): Promise<Models.RestoreSecretResponse>;
}
